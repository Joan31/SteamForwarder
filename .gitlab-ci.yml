image: gcc

before_script:
- export PATH="/opt/wine-stable/bin${PATH:+:$PATH}"

install:wine:
  stage: build
  cache:
    key: wine
    paths:
    - /opt/wine-*
  artifacts:
    expire_in: 1 mounth
    paths:
    - /opt/wine-*
  script:
  - |
    if [ ! -x /opt/wine-stable/bin/winegcc ]; then
      dpkg --add-architecture i386
      wget -qO - https://dl.winehq.org/wine-builds/Release.key | apt-key add -
      echo "deb http://dl.winehq.org/wine-builds/debian/ jessie main" > /etc/apt/sources.list.d/wine.list
      apt-get update
      apt-get install -y -f wine-stable wine-stable-dev binutils-dev
    fi

build:compiler:
  stage: build
  cache:
    key: nim-compiler
    paths:
    - nim-devel
    - nim-master
  artifacts:
    expire_in: 1h
    paths:
    - nim-master/bin
    - nim-master/config
    - nim-master/lib
    - nim-devel/bin
    - nim-devel/config
    - nim-devel/lib
  script:
  - |
    for BRANCH in master devel; do
    if [ ! -x nim-$BRANCH/bin/nim ]; then
      git clone -b $BRANCH --depth 1 git://github.com/nim-lang/nim nim-$BRANCH/
      cd nim-$BRANCH
      git clone --depth 1 git://github.com/nim-lang/csources csources/
      cd csources
      sh build.sh
      cd ..
      rm -rf csources
      bin/nim c koch
      ./koch boot -d:release
      ./koch nimble
    else
      cd nim-$BRANCH
      git fetch origin
      if ! git merge FETCH_HEAD | grep "Already up-to-date"; then
        bin/nim c koch
        ./koch boot -d:release
        ./koch nimble
      fi
    fi
    cd ..
    done


test:master:
  stage: test
  dependencies:
  - build:compiler
  - install:wine
  script:
  - nim-master/bin/nim -v
  - winegcc -v
  - wine --version
  - make NIMC="$PWD/nim-master/bin/nim" ARCH=64 precompile

test:devel:
  stage: test
  dependencies:
  - build:compiler
  - install:wine
  allow_failure: true
  script:
  - nim-devel/bin/nim -v
  - winegcc -v
  - wine --version
  - make NIMC="$PWD/nim-devel/bin/nim" ARCH=64 precompile
