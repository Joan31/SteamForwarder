
from utils import parseFullSpec, SpecFile
from wrapper import wrapIfNecessary
from generators import genTraceCall, genCall, genArgs
from wine import trace
from callback import wrap, unwrap
import macros

macro generateLinuxDecls*(specs: static[SpecFile]): untyped =
  result = newStmtList()
  if specs.libpath.isNil:
    error("Spec file was not generated by dllparser or it was not found " &
          "any suitable libsteam_api.so!")
  let linkopt = newStrLitNode(specs.libpath)
  result.add quote do:
    {.passL:`linkopt`.}
  for s in specs.symbols:
    let name = newIdentNode(s.realname)
    let actualname = newStrLitNode(s.realname)
    let params = newTree(nnkFormalParams, genArgs(s.nargs))
    var decl = quote do:
      proc `name`() {.cdecl, importc: `actualname`.}
    decl[3] = params
    result.add(decl)
  when defined(debug):
    echo(result.repr)

const toskip = ["SteamAPI_RunCallbacks_"]
const regcallback = @[
  "SteamAPI_RegisterCallback_",
  "SteamAPI_RegisterCallResult_",
]
const unregcallback = @[
  "SteamAPI_UnregisterCallback_",
  "SteamAPI_UnregisterCallResult_",
]

macro generateWineDecls*(specs: static[SpecFile]): untyped =
  result = newStmtList()
  for s in specs.symbols:
    let name = newIdentNode(s.name & "Lin")
    let exportname = newStrLitNode(s.name)
    let params = newTree(nnkFormalParams, genArgs(s.nargs))
    var decl = quote do:
      proc `name`*() {.cdecl, exportc: `exportname`.}
    decl[3] = params
    var call = genCall(s.realname, s.nargs)
    let tracecall = genTraceCall(s.nargs)
    if s.name in (regcallback & unregcallback):
      let warg1 = newIdentNode("wrappedarg")
      let arg1 = call[1]
      call[1] = warg1
      decl.body = quote do:
        `tracecall`
        trace("\n")
        let `warg1` = wrap(`arg1`)
        trace("= %p\n", `call`)
      if s.name in unregcallback:
        decl.body.add quote do:
          unwrap(`arg1`)
    elif s.name in toskip:
      decl.body = quote do:
        #`tracecall`
        #trace(" - skipped\n")
        `call`
    else:
      decl.body = quote do:
        `tracecall`
        let res = `call`
        trace(" = %p\n", res)
        let finalres = wrapIfNecessary(res)
        return finalres
    result.add(decl)
  when defined(debug):
    echo(result.repr)

