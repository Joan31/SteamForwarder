
from utils import parseFullSpec, SpecFile
from wrapper import wrapIfNecessary
import macros

proc genArgs(n: int): seq[NimNode] {.compileTime.} =
  result = newSeq[NimNode](n+1)
  result[0] = newIdentNode("cuint")
  for i in 1..n:
    result[i] = newIdentDefs(newIdentNode("argument" & $i),
                             newIdentNode("cuint"))
proc genCall(name: string, n: int): NimNode {.compileTime.} =
  var args = newSeq[NimNode](n+1)
  args[0] = newIdentNode(name)
  for i in 1..n:
    args[i] = newIdentNode("argument" & $i)
  newTree(nnkCall, args)

macro generateLinuxDecls*(specs: static[SpecFile]): untyped =
  result = newStmtList()
  if specs.libpath.isNil:
    error("Spec file was not generated by dllparser or it was not found " &
          "any suitable libsteam_api.so!")
  let linkopt = newStrLitNode("-L" & specs.libpath)
  result.add quote do:
    {.passL:`linkopt`.}
  for s in specs.symbols:
    let name = newIdentNode(s.realname)
    let params = newTree(nnkFormalParams, genArgs(s.nargs))
    var decl = quote do:
      proc `name`() {.cdecl, importc.}
    decl[3] = params
    result.add(decl)
  when defined(debug):
    echo(result.repr)

macro generateWineDecls*(specs: static[SpecFile]): untyped =
  result = newStmtList()
  for s in specs.symbols:
    let name = newIdentNode(s.name & "Lin")
    let exportname = newStrLitNode(s.name)
    let params = newTree(nnkFormalParams, genArgs(s.nargs))
    var decl = quote do:
      proc `name`*() {.cdecl, exportc: `exportname`.}
    decl[3] = params
    let call = genCall(s.realname, s.nargs)
    decl.body = quote do:
      let res = `call`
      let finalres = wrapIfNecessary(res)
      return res
    result.add(decl)
  when defined(debug):
    echo(result.repr)

